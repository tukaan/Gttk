// Copyright (c) 2004-2012 Georgios Petasis (petasis@iit.demokritos.gr)
// Copyright (c) 2022 rdbende (rdbende@gmail.com)
//
// THIS FILE IS AUTOMATICALLY GENERATED - DO NOT EDIT! */

#ifndef _GTTK_SYMBOLS
#define _GTTK_SYMBOLS
#include "tcl.h"
#ifdef LOAD_SYMBOLS_WITH_TCL
#else
#include <glib.h>
#endif
#include <gdk/gdk.h>
#include <gtk/gtk.h>
#include <gdk-pixbuf/gdk-pixbuf.h>
#ifndef __WIN32__
#include <gdk-pixbuf-xlib/gdk-pixbuf-xlib.h>
#include <gdk/gdkx.h>
#else
#include <gdk/gdkwin32.h>
#endif

#ifdef    GTTK_LOAD_GTK_DYNAMICALLY
extern "C" {
  typedef void (*Ptr_g_free)(gpointer mem);
  extern Ptr_g_free Gttk_g_free;
  typedef GList* (*Ptr_g_hash_table_get_keys)(GHashTable *hash_table);
  extern Ptr_g_hash_table_get_keys Gttk_g_hash_table_get_keys;
  typedef gpointer (*Ptr_g_malloc)(gsize n_bytes);
  extern Ptr_g_malloc Gttk_g_malloc;
  typedef gpointer (*Ptr_g_malloc0)(gsize n_bytes);
  extern Ptr_g_malloc0 Gttk_g_malloc0;
  typedef void (*Ptr_g_object_get)(gpointer object, const gchar *first_property_name, ...);
  extern Ptr_g_object_get Gttk_g_object_get;
  typedef void (*Ptr_g_object_unref)(gpointer object);
  extern Ptr_g_object_unref Gttk_g_object_unref;
  typedef void (*Ptr_g_option_context_add_main_entries)(GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain);
  extern Ptr_g_option_context_add_main_entries Gttk_g_option_context_add_main_entries;
  typedef GOptionContext* (*Ptr_g_option_context_new)(const gchar *parameter_string);
  extern Ptr_g_option_context_new Gttk_g_option_context_new;
  typedef void (*Ptr_g_strfreev)(gchar **str_array);
  extern Ptr_g_strfreev Gttk_g_strfreev;
  typedef gchar* (*Ptr_gdk_color_to_string)(const GdkColor *color);
  extern Ptr_gdk_color_to_string Gttk_gdk_color_to_string;
  typedef GdkDisplay* (*Ptr_gdk_display_get_default)(void);
  extern Ptr_gdk_display_get_default Gttk_gdk_display_get_default;
  typedef GdkScreen* (*Ptr_gdk_display_get_screen)(GdkDisplay*, gint);
  extern Ptr_gdk_display_get_screen Gttk_gdk_display_get_screen;
  typedef void (*Ptr_gdk_drawable_set_colormap)(GdkColormap*);
  extern Ptr_gdk_drawable_set_colormap Gttk_gdk_drawable_set_colormap;
  typedef GdkGC* (*Ptr_gdk_gc_new)(GdkDrawable *drawable);
  extern Ptr_gdk_gc_new Gttk_gdk_gc_new;
  typedef GdkPixbuf* (*Ptr_gdk_pixbuf_get_from_drawable)(GdkPixbuf *dest, GdkDrawable *src, GdkColormap *cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
  extern Ptr_gdk_pixbuf_get_from_drawable Gttk_gdk_pixbuf_get_from_drawable;
  typedef GdkPixbuf* (*Ptr_gdk_pixbuf_new)(GdkColorspace colorspace, gboolean has_alpha, int bits_per_sample, int width, int height);
  extern Ptr_gdk_pixbuf_new Gttk_gdk_pixbuf_new;
  typedef void (*Ptr_gdk_pixbuf_unref)(GdkPixbuf *pixbuf);
  extern Ptr_gdk_pixbuf_unref Gttk_gdk_pixbuf_unref;
  typedef void (*Ptr_gdk_pixbuf_xlib_render_to_drawable)(GdkPixbuf *pixbuf, Drawable drawable, GC gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, XlibRgbDither dither, int x_dither, int y_dither);
  extern Ptr_gdk_pixbuf_xlib_render_to_drawable Gttk_gdk_pixbuf_xlib_render_to_drawable;
  typedef GdkPixmap* (*Ptr_gdk_pixmap_foreign_new_for_screen)(GdkScreen *screen, GdkNativeWindow anid, gint width, gint height, gint depth);
  extern Ptr_gdk_pixmap_foreign_new_for_screen Gttk_gdk_pixmap_foreign_new_for_screen;
  typedef GdkPixmap* (*Ptr_gdk_pixmap_new)(GdkDrawable *drawable, gint width, gint height, gint depth);
  extern Ptr_gdk_pixmap_new Gttk_gdk_pixmap_new;
  typedef GdkColormap* (*Ptr_gdk_x11_colormap_foreign_new)(GdkVisual *visual, Colormap xcolormap);
  extern Ptr_gdk_x11_colormap_foreign_new Gttk_gdk_x11_colormap_foreign_new;
  typedef GdkDisplay* (*Ptr_gdk_x11_lookup_xdisplay)(Display *xdisplay);
  extern Ptr_gdk_x11_lookup_xdisplay Gttk_gdk_x11_lookup_xdisplay;
  typedef GdkVisual* (*Ptr_gdk_x11_screen_lookup_visual)(GdkScreen *screen, VisualID xvisualid);
  extern Ptr_gdk_x11_screen_lookup_visual Gttk_gdk_x11_screen_lookup_visual;
  typedef GtkObject* (*Ptr_gtk_adjustment_new)(double, double, double, double, double, double);
  extern Ptr_gtk_adjustment_new Gttk_gtk_adjustment_new;
  typedef void (*Ptr_gtk_adjustment_set_value)(GtkAdjustment *adjustment, gdouble value);
  extern Ptr_gtk_adjustment_set_value Gttk_gtk_adjustment_set_value;
  typedef GtkWidget* (*Ptr_gtk_arrow_new)(GtkArrowType at, GtkShadowType st);
  extern Ptr_gtk_arrow_new Gttk_gtk_arrow_new;
  typedef void (*Ptr_gtk_border_free)(GtkBorder*);
  extern Ptr_gtk_border_free Gttk_gtk_border_free;
  typedef GtkReliefStyle (*Ptr_gtk_button_get_relief)(GtkButton *button);
  extern Ptr_gtk_button_get_relief Gttk_gtk_button_get_relief;
  typedef GtkWidget* (*Ptr_gtk_button_new)(void);
  extern Ptr_gtk_button_new Gttk_gtk_button_new;
  typedef void (*Ptr_gtk_button_set_relief)(GtkButton *button, GtkReliefStyle newstyle);
  extern Ptr_gtk_button_set_relief Gttk_gtk_button_set_relief;
  typedef GtkWidget* (*Ptr_gtk_check_button_new)(void);
  extern Ptr_gtk_check_button_new Gttk_gtk_check_button_new;
  typedef GtkWidget* (*Ptr_gtk_combo_box_entry_new)(void);
  extern Ptr_gtk_combo_box_entry_new Gttk_gtk_combo_box_entry_new;
  typedef GtkWidget* (*Ptr_gtk_combo_box_new)(void);
  extern Ptr_gtk_combo_box_new Gttk_gtk_combo_box_new;
  typedef void (*Ptr_gtk_container_add)(GtkContainer *container, GtkWidget *widget);
  extern Ptr_gtk_container_add Gttk_gtk_container_add;
  typedef void (*Ptr_gtk_disable_setlocale)(void);
  extern Ptr_gtk_disable_setlocale Gttk_gtk_disable_setlocale;
  typedef GtkWidget* (*Ptr_gtk_entry_new)(void);
  extern Ptr_gtk_entry_new Gttk_gtk_entry_new;
  typedef GtkWidget* (*Ptr_gtk_fixed_new)(void);
  extern Ptr_gtk_fixed_new Gttk_gtk_fixed_new;
  typedef GtkWidget* (*Ptr_gtk_frame_new)(const gchar *label);
  extern Ptr_gtk_frame_new Gttk_gtk_frame_new;
  typedef GtkWidget* (*Ptr_gtk_hpaned_new)(void);
  extern Ptr_gtk_hpaned_new Gttk_gtk_hpaned_new;
  typedef GtkWidget* (*Ptr_gtk_hscale_new_with_range)(gdouble min, gdouble max, gdouble step);
  extern Ptr_gtk_hscale_new_with_range Gttk_gtk_hscale_new_with_range;
  typedef GtkWidget* (*Ptr_gtk_hscrollbar_new)(GtkAdjustment *);
  extern Ptr_gtk_hscrollbar_new Gttk_gtk_hscrollbar_new;
  typedef gboolean (*Ptr_gtk_init_check)(int *argc, char ***argv);
  extern Ptr_gtk_init_check Gttk_gtk_init_check;
  typedef GtkWidget* (*Ptr_gtk_notebook_new)(void);
  extern Ptr_gtk_notebook_new Gttk_gtk_notebook_new;
  typedef void (*Ptr_gtk_object_get)(GtkObject *object, const gchar *first_property_name, ...);
  extern Ptr_gtk_object_get Gttk_gtk_object_get;
  typedef void (*Ptr_gtk_paint_arrow)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, GtkArrowType, gboolean, gint , gint , gint , gint);
  extern Ptr_gtk_paint_arrow Gttk_gtk_paint_arrow;
  typedef void (*Ptr_gtk_paint_box)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint , gint , gint , gint);
  extern Ptr_gtk_paint_box Gttk_gtk_paint_box;
  typedef void (*Ptr_gtk_paint_box_gap)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint, gint, gint , gint, GtkPositionType, gint gap_x, gint gap_width);
  extern Ptr_gtk_paint_box_gap Gttk_gtk_paint_box_gap;
  typedef void (*Ptr_gtk_paint_check)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint , gint , gint , gint);
  extern Ptr_gtk_paint_check Gttk_gtk_paint_check;
  typedef void (*Ptr_gtk_paint_extension)(GtkStyle *, GdkWindow *, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint, gint, gint, gint, GtkPositionType);
  extern Ptr_gtk_paint_extension Gttk_gtk_paint_extension;
  typedef void (*Ptr_gtk_paint_flat_box)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint , gint , gint , gint);
  extern Ptr_gtk_paint_flat_box Gttk_gtk_paint_flat_box;
  typedef void (*Ptr_gtk_paint_focus)(GtkStyle *style, GdkWindow *window, GtkStateType state_type, GdkRectangle *area, GtkWidget *widget, const gchar *detail, gint x, gint y, gint width, gint height);
  extern Ptr_gtk_paint_focus Gttk_gtk_paint_focus;
  typedef void (*Ptr_gtk_paint_handle)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint , gint , gint , gint, GtkOrientation);
  extern Ptr_gtk_paint_handle Gttk_gtk_paint_handle;
  typedef void (*Ptr_gtk_paint_option)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint , gint , gint , gint);
  extern Ptr_gtk_paint_option Gttk_gtk_paint_option;
  typedef void (*Ptr_gtk_paint_resize_grip)(GtkStyle*,GdkWindow*, GtkStateType, const GdkRectangle *, GtkWidget *, const gchar *, GdkWindowEdge, gint , gint , gint , gint);
  extern Ptr_gtk_paint_resize_grip Gttk_gtk_paint_resize_grip;
  typedef void (*Ptr_gtk_paint_shadow)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint , gint , gint , gint);
  extern Ptr_gtk_paint_shadow Gttk_gtk_paint_shadow;
  typedef void (*Ptr_gtk_paint_slider)(GtkStyle*,GdkWindow*, GtkStateType, GtkShadowType, const GdkRectangle *, GtkWidget *, const gchar *, gint , gint , gint , gint, GtkOrientation);
  extern Ptr_gtk_paint_slider Gttk_gtk_paint_slider;
  typedef GtkWidget* (*Ptr_gtk_progress_bar_new)(void);
  extern Ptr_gtk_progress_bar_new Gttk_gtk_progress_bar_new;
  typedef void (*Ptr_gtk_progress_bar_set_bar_style)(GtkProgressBar *pbar, GtkProgressBarStyle style);
  extern Ptr_gtk_progress_bar_set_bar_style Gttk_gtk_progress_bar_set_bar_style;
  typedef void (*Ptr_gtk_progress_bar_set_fraction)(GtkProgressBar *pbar, gdouble fraction);
  extern Ptr_gtk_progress_bar_set_fraction Gttk_gtk_progress_bar_set_fraction;
  typedef void (*Ptr_gtk_progress_bar_set_orientation)(GtkProgressBar *pbar, GtkProgressBarOrientation orientation);
  extern Ptr_gtk_progress_bar_set_orientation Gttk_gtk_progress_bar_set_orientation;
  typedef GtkAdjustment * (*Ptr_gtk_range_get_adjustment)(GtkRange *range);
  extern Ptr_gtk_range_get_adjustment Gttk_gtk_range_get_adjustment;
  typedef gchar** (*Ptr_gtk_rc_get_default_files)(void);
  extern Ptr_gtk_rc_get_default_files Gttk_gtk_rc_get_default_files;
  typedef GtkStyle * (*Ptr_gtk_rc_get_style)(GtkWidget*);
  extern Ptr_gtk_rc_get_style Gttk_gtk_rc_get_style;
  typedef gchar* (*Ptr_gtk_rc_get_theme_dir)(void);
  extern Ptr_gtk_rc_get_theme_dir Gttk_gtk_rc_get_theme_dir;
  typedef gboolean (*Ptr_gtk_rc_reparse_all_for_settings)(GtkSettings *settings, gboolean force_load);
  extern Ptr_gtk_rc_reparse_all_for_settings Gttk_gtk_rc_reparse_all_for_settings;
  typedef void (*Ptr_gtk_rc_reset_styles)(GtkSettings *settings);
  extern Ptr_gtk_rc_reset_styles Gttk_gtk_rc_reset_styles;
  typedef void (*Ptr_gtk_rc_set_default_files)(gchar **filenames);
  extern Ptr_gtk_rc_set_default_files Gttk_gtk_rc_set_default_files;
  typedef GtkSettings * (*Ptr_gtk_settings_get_default)(void);
  extern Ptr_gtk_settings_get_default Gttk_gtk_settings_get_default;
  typedef GtkWidget* (*Ptr_gtk_statusbar_new)(void);
  extern Ptr_gtk_statusbar_new Gttk_gtk_statusbar_new;
  typedef void (*Ptr_gtk_style_apply_default_background)(GtkStyle *style, GdkWindow *window, gboolean set_bg, GtkStateType state_type, GdkRectangle *area, gint x, gint y, gint width, gint height);
  extern Ptr_gtk_style_apply_default_background Gttk_gtk_style_apply_default_background;
  typedef GtkStyle* (*Ptr_gtk_style_attach)(GtkStyle *, GdkWindow *);
  extern Ptr_gtk_style_attach Gttk_gtk_style_attach;
  typedef gboolean (*Ptr_gtk_style_lookup_color)(GtkStyle *style, const gchar *color_name, GdkColor *color);
  extern Ptr_gtk_style_lookup_color Gttk_gtk_style_lookup_color;
  typedef GtkWidget* (*Ptr_gtk_toolbar_new)(void);
  extern Ptr_gtk_toolbar_new Gttk_gtk_toolbar_new;
  typedef GtkWidget* (*Ptr_gtk_vpaned_new)(void);
  extern Ptr_gtk_vpaned_new Gttk_gtk_vpaned_new;
  typedef GtkWidget* (*Ptr_gtk_vscale_new_with_range)(gdouble min, gdouble max, gdouble step);
  extern Ptr_gtk_vscale_new_with_range Gttk_gtk_vscale_new_with_range;
  typedef GtkWidget* (*Ptr_gtk_vscrollbar_new)(GtkAdjustment *);
  extern Ptr_gtk_vscrollbar_new Gttk_gtk_vscrollbar_new;
  typedef void (*Ptr_gtk_widget_destroy)(GtkWidget *);
  extern Ptr_gtk_widget_destroy Gttk_gtk_widget_destroy;
  typedef void (*Ptr_gtk_widget_realize)(GtkWidget *);
  extern Ptr_gtk_widget_realize Gttk_gtk_widget_realize;
  typedef void (*Ptr_gtk_widget_set_size_request)(GtkWidget *widget, gint width, gint height);
  extern Ptr_gtk_widget_set_size_request Gttk_gtk_widget_set_size_request;
  typedef void (*Ptr_gtk_widget_size_request)(GtkWidget *widget, GtkRequisition *requisition);
  extern Ptr_gtk_widget_size_request Gttk_gtk_widget_size_request;
  typedef void (*Ptr_gtk_widget_style_get)(GtkWidget *, const gchar *first_property_name, ...);
  extern Ptr_gtk_widget_style_get Gttk_gtk_widget_style_get;
  typedef GtkWidget* (*Ptr_gtk_window_new)(GtkWindowType);
  extern Ptr_gtk_window_new Gttk_gtk_window_new;
  typedef void (*Ptr_xlib_rgb_init)(Display *display, Screen *screen);
  extern Ptr_xlib_rgb_init Gttk_xlib_rgb_init;
}

extern int Gttk_InitialiseSymbols_gdk(Tcl_Interp *interp, Tcl_Obj *file_name);
#define GTTK_LAST_SYMBOL_gdk Gttk_gdk_x11_screen_lookup_visual
extern int Gttk_InitialiseSymbols_gdk_pixbuf(Tcl_Interp *interp, Tcl_Obj *file_name);
#define GTTK_LAST_SYMBOL_gdk_pixbuf Gttk_gdk_pixbuf_unref
extern int Gttk_InitialiseSymbols_gdk_pixbuf_xlib(Tcl_Interp *interp, Tcl_Obj *file_name);
#define GTTK_LAST_SYMBOL_gdk_pixbuf_xlib Gttk_xlib_rgb_init
extern int Gttk_InitialiseSymbols_glib(Tcl_Interp *interp, Tcl_Obj *file_name);
#define GTTK_LAST_SYMBOL_glib Gttk_g_strfreev
extern int Gttk_InitialiseSymbols_gobject(Tcl_Interp *interp, Tcl_Obj *file_name);
#define GTTK_LAST_SYMBOL_gobject Gttk_g_object_unref
extern int Gttk_InitialiseSymbols_gtk(Tcl_Interp *interp, Tcl_Obj *file_name);
#define GTTK_LAST_SYMBOL_gtk Gttk_gtk_window_new

#else  /* GTTK_LOAD_GTK_DYNAMICALLY */

#define Gttk_g_free \
                free
#define Gttk_g_hash_table_get_keys \
                hash_table_get_keys
#define Gttk_g_malloc \
                malloc
#define Gttk_g_malloc0 \
                malloc0
#define Gttk_g_object_get \
                object_get
#define Gttk_g_object_unref \
                object_unref
#define Gttk_g_option_context_add_main_entries \
                option_context_add_main_entries
#define Gttk_g_option_context_new \
                option_context_new
#define Gttk_g_strfreev \
                strfreev
#define Gttk_gdk_color_to_string \
                k_color_to_string
#define Gttk_gdk_display_get_default \
                k_display_get_default
#define Gttk_gdk_display_get_screen \
                k_display_get_screen
#define Gttk_gdk_drawable_set_colormap \
                k_drawable_set_colormap
#define Gttk_gdk_gc_new \
                k_gc_new
#define Gttk_gdk_pixbuf_get_from_drawable \
                k_pixbuf_get_from_drawable
#define Gttk_gdk_pixbuf_new \
                k_pixbuf_new
#define Gttk_gdk_pixbuf_unref \
                k_pixbuf_unref
#define Gttk_gdk_pixbuf_xlib_render_to_drawable \
                k_pixbuf_xlib_render_to_drawable
#define Gttk_gdk_pixmap_foreign_new_for_screen \
                k_pixmap_foreign_new_for_screen
#define Gttk_gdk_pixmap_new \
                k_pixmap_new
#define Gttk_gdk_x11_colormap_foreign_new \
                k_x11_colormap_foreign_new
#define Gttk_gdk_x11_lookup_xdisplay \
                k_x11_lookup_xdisplay
#define Gttk_gdk_x11_screen_lookup_visual \
                k_x11_screen_lookup_visual
#define Gttk_gtk_adjustment_new \
                k_adjustment_new
#define Gttk_gtk_adjustment_set_value \
                k_adjustment_set_value
#define Gttk_gtk_arrow_new \
                k_arrow_new
#define Gttk_gtk_border_free \
                k_border_free
#define Gttk_gtk_button_get_relief \
                k_button_get_relief
#define Gttk_gtk_button_new \
                k_button_new
#define Gttk_gtk_button_set_relief \
                k_button_set_relief
#define Gttk_gtk_check_button_new \
                k_check_button_new
#define Gttk_gtk_combo_box_entry_new \
                k_combo_box_entry_new
#define Gttk_gtk_combo_box_new \
                k_combo_box_new
#define Gttk_gtk_container_add \
                k_container_add
#define Gttk_gtk_disable_setlocale \
                k_disable_setlocale
#define Gttk_gtk_entry_new \
                k_entry_new
#define Gttk_gtk_fixed_new \
                k_fixed_new
#define Gttk_gtk_frame_new \
                k_frame_new
#define Gttk_gtk_hpaned_new \
                k_hpaned_new
#define Gttk_gtk_hscale_new_with_range \
                k_hscale_new_with_range
#define Gttk_gtk_hscrollbar_new \
                k_hscrollbar_new
#define Gttk_gtk_init_check \
                k_init_check
#define Gttk_gtk_notebook_new \
                k_notebook_new
#define Gttk_gtk_object_get \
                k_object_get
#define Gttk_gtk_paint_arrow \
                k_paint_arrow
#define Gttk_gtk_paint_box \
                k_paint_box
#define Gttk_gtk_paint_box_gap \
                k_paint_box_gap
#define Gttk_gtk_paint_check \
                k_paint_check
#define Gttk_gtk_paint_extension \
                k_paint_extension
#define Gttk_gtk_paint_flat_box \
                k_paint_flat_box
#define Gttk_gtk_paint_focus \
                k_paint_focus
#define Gttk_gtk_paint_handle \
                k_paint_handle
#define Gttk_gtk_paint_option \
                k_paint_option
#define Gttk_gtk_paint_resize_grip \
                k_paint_resize_grip
#define Gttk_gtk_paint_shadow \
                k_paint_shadow
#define Gttk_gtk_paint_slider \
                k_paint_slider
#define Gttk_gtk_progress_bar_new \
                k_progress_bar_new
#define Gttk_gtk_progress_bar_set_bar_style \
                k_progress_bar_set_bar_style
#define Gttk_gtk_progress_bar_set_fraction \
                k_progress_bar_set_fraction
#define Gttk_gtk_progress_bar_set_orientation \
                k_progress_bar_set_orientation
#define Gttk_gtk_range_get_adjustment \
                k_range_get_adjustment
#define Gttk_gtk_rc_get_default_files \
                k_rc_get_default_files
#define Gttk_gtk_rc_get_style \
                k_rc_get_style
#define Gttk_gtk_rc_get_theme_dir \
                k_rc_get_theme_dir
#define Gttk_gtk_rc_reparse_all_for_settings \
                k_rc_reparse_all_for_settings
#define Gttk_gtk_rc_reset_styles \
                k_rc_reset_styles
#define Gttk_gtk_rc_set_default_files \
                k_rc_set_default_files
#define Gttk_gtk_settings_get_default \
                k_settings_get_default
#define Gttk_gtk_statusbar_new \
                k_statusbar_new
#define Gttk_gtk_style_apply_default_background \
                k_style_apply_default_background
#define Gttk_gtk_style_attach \
                k_style_attach
#define Gttk_gtk_style_lookup_color \
                k_style_lookup_color
#define Gttk_gtk_toolbar_new \
                k_toolbar_new
#define Gttk_gtk_vpaned_new \
                k_vpaned_new
#define Gttk_gtk_vscale_new_with_range \
                k_vscale_new_with_range
#define Gttk_gtk_vscrollbar_new \
                k_vscrollbar_new
#define Gttk_gtk_widget_destroy \
                k_widget_destroy
#define Gttk_gtk_widget_realize \
                k_widget_realize
#define Gttk_gtk_widget_set_size_request \
                k_widget_set_size_request
#define Gttk_gtk_widget_size_request \
                k_widget_size_request
#define Gttk_gtk_widget_style_get \
                k_widget_style_get
#define Gttk_gtk_window_new \
                k_window_new
#define Gttk_xlib_rgb_init \
                ib_rgb_init
#endif /* GTTK_LOAD_GTK_DYNAMICALLY */

#endif /* _GTTK_SYMBOLS */
